name: Deploy to EC2 via Docker Hub

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Java 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # Gradle 빌드 후 JAR 파일 위치 확인
      - name: Log JAR File Location
        run: |
          echo "Listing files in build/libs/"
          ls -la build/libs/

      - name: Move JAR to Project Root
        run: |
          # 🔹 빌드된 JAR 파일을 프로젝트 루트로 이동하여 Docker 빌드 컨텍스트에 포함
          # 🔹 Dockerfile에서 COPY 명령어가 제대로 작동하도록 설정
          cp build/libs/*.jar app.jar
          # 🔹 현재 디렉토리의 파일 목록을 출력하여 JAR 파일이 정상적으로 이동했는지 확인
          ls -la    

      # Docker 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/cicd-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/cicd-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Setup SSH and Deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST \
            "export DOCKER_USERNAME=${DOCKER_USERNAME} && \
             docker stop cicd-app || true && \
             docker rm cicd-app || true && \
             docker pull ${DOCKER_USERNAME}/cicd-app:latest && \
             docker run -d --name cicd-app -p 8080:8080 ${DOCKER_USERNAME}/cicd-app:latest"
