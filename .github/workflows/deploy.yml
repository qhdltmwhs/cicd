name: Deploy to AWS EC2 via Docker Hub

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Java 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # ✅ JAR 파일을 프로젝트 루트로 이동
      - name: Move JAR to Project Root
        run: |
          cp build/libs/*.jar app.jar

      # ✅ Docker 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ✅ Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/cicd-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/cicd-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup SSH and Deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << EOF
            mkdir -p ~/cicd/nginx
          EOF

      # ✅ docker-compose.yml을 EC2로 복사
      - name: Copy docker-compose.yml to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: scp -o StrictHostKeyChecking=no -i private_key.pem docker-compose.yml $EC2_USER@$EC2_HOST:~/cicd/docker-compose.yml

      # ✅ Nginx 설정 파일 복사 후 반영
      - name: Copy Nginx Config and Reload
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          scp -o StrictHostKeyChecking=no -i private_key.pem nginx/default.conf $EC2_USER@$EC2_HOST:~/cicd/nginx/default.conf

          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << EOF
            echo "✅ Nginx 설정 파일 업데이트"

            # ✅ 변경된 설정을 Nginx 컨테이너 내부로 복사
            docker cp ~/cicd/nginx/default.conf nginx-container:/etc/nginx/conf.d/default.conf

            # ✅ Nginx 컨테이너가 실행 중이면 설정 리로드, 그렇지 않으면 시작
            if [ \$(docker ps -q -f name=nginx-container) ]; then
              echo "✅ Nginx 설정 리로드"
              docker exec nginx-container nginx -s reload
            else
              echo "⚠️ Nginx 컨테이너가 실행 중이 아님. 다시 시작"
              docker-compose up -d nginx
            fi
          EOF

      # ✅ 불필요한 Docker 컨테이너 및 이미지 정리 후 배포
      - name: Cleanup Old Containers and Deploy
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << EOF
            cd ~/cicd  # ✅ 배포 폴더 이동 (docker-compose.yml 위치)

            # ✅ 1️⃣ Docker Hub 로그인 (배포를 위해 Docker Hub에서 최신 이미지 가져오기)
            echo "✅ Docker Hub 로그인"
            docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"

            # ✅ 2️⃣ 기존 실행 중인 컨테이너 정리 (현재 실행 중인 컨테이너는 유지)
            echo "✅ 기존 실행 중인 컨테이너 정리"
            docker container prune -f  # ⭕ 실행이 중단된 컨테이너만 삭제

            # ✅ 3️⃣ 최신 애플리케이션 이미지 강제 업데이트
            echo "✅ 최신 애플리케이션 이미지 업데이트"
            docker-compose pull  # ✅ 최신 이미지 가져오기 (nginx, mysql 포함)

            # ✅ 4️⃣ 컨테이너 실행 (nginx와 mysql 항상 실행)
            echo "✅ 컨테이너 실행"
            docker-compose up -d --remove-orphans  # ✅ 모든 서비스 컨테이너 실행

            # ✅ 5️⃣ 불필요한 Docker 이미지 삭제 (24시간 이상 지난 이미지 삭제)
            echo "✅ 오래된 Docker 이미지 삭제"
            docker image prune -a --filter "until=24h" -f  # ✅ 24시간 이상 사용되지 않은 모든 이미지 삭제
            docker image prune -af  # ✅ 태그 없는 이미지(중간 빌드 캐시 포함) 모두 삭제
          
          EOF
