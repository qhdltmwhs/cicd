name: Deploy to AWS EC2 via Docker Hub

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Java 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # ✅ JAR 파일을 프로젝트 루트로 이동
      - name: Move JAR to Project Root
        run: |
          cp build/libs/*.jar app.jar

      # ✅ Docker 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ✅ Docker 이미지 빌드 및 푸시 (하나의 공통 이미지)
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/cicd-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/cicd-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup SSH and Deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << EOF
            mkdir -p ~/cicd/nginx
          EOF

      # ✅ docker-compose.yml을 EC2로 복사
      - name: Copy docker-compose.yml to EC2
        run: scp -o StrictHostKeyChecking=no -i private_key.pem docker-compose.yml $EC2_USER@$EC2_HOST:~/cicd/docker-compose.yml

      # ✅ Nginx 설정 파일 복사
      - name: Copy Nginx Config to EC2
        run: scp -o StrictHostKeyChecking=no -i private_key.pem nginx/default.conf $EC2_USER@$EC2_HOST:~/cicd/nginx/default.conf

      # ✅ 배포 및 Blue-Green 전환
      - name: Deploy with Blue-Green Switching
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << EOF
            cd ~/cicd

            # ✅ Docker Hub 로그인
            echo "✅ Docker Hub 로그인"
            docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"

            # ✅ 현재 실행 중인 컨테이너 확인
            CURRENT_APP=\$(docker ps --format "{{.Names}}" | grep 'cicd-app-' | head -n 1)

            if [ "\$CURRENT_APP" == "cicd-app-blue" ]; then
              NEW_APP="cicd-app-green"
            else
              NEW_APP="cicd-app-blue"
            fi

            echo "✅ 현재 실행 중인 컨테이너: \$CURRENT_APP"
            echo "✅ 새로운 컨테이너로 변경: \$NEW_APP"

            # ✅ 최신 애플리케이션 이미지 강제 업데이트
            echo "✅ 최신 이미지 업데이트"
            docker pull $DOCKER_USERNAME/cicd-app:latest

            # ✅ 새로운 컨테이너 실행
            echo "✅ 새로운 컨테이너 실행: \$NEW_APP"
            docker run -d --name \$NEW_APP --network app_network -e SPRING_PROFILES_ACTIVE=prod $DOCKER_USERNAME/cicd-app:latest

            # ✅ Nginx 설정 변경
            echo "✅ Nginx 설정 변경"
            sed -i "s|proxy_pass http://.*:8080;|proxy_pass http://\$NEW_APP:8080;|g" ~/cicd/nginx/default.conf
            docker exec nginx-container nginx -s reload

            # ✅ 기존 컨테이너 종료 및 삭제
            echo "✅ 기존 컨테이너 정리: \$CURRENT_APP"
            docker stop \$CURRENT_APP || true
            docker rm \$CURRENT_APP || true

            # ✅ 불필요한 Docker 이미지 정리
            echo "✅ 불필요한 Docker 이미지 삭제"
            docker image prune -a --filter "until=24h" -f
            docker image prune -af
          EOF
