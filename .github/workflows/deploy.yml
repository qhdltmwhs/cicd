name: Deploy to AWS EC2 via Docker Hub

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Java 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # ✅ JAR 파일을 프로젝트 루트로 이동
      - name: Move JAR to Project Root
        run: |
          cp build/libs/*.jar app.jar

      # ✅ Docker 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ✅ Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/cicd-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/cicd-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup SSH and Deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << EOF
            mkdir -p ~/cicd/nginx
          EOF

      - name: Copy docker-compose.yml to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "mkdir -p ~/cicd"
          scp -o StrictHostKeyChecking=no -i private_key.pem docker-compose.yml $EC2_USER@$EC2_HOST:~/cicd/docker-compose.yml

      - name: Deploy with Blue-Green Deployment
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << EOF
            cd ~/cicd

            # ✅ Docker Hub 로그인
            docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"

            # ✅ 현재 실행 중인 컨테이너 확인
            CURRENT_APP=\$(docker ps --format "{{.Names}}" | grep -E 'cicd-app-blue|cicd-app-green' || echo "none")

            if [ "\$CURRENT_APP" = "cicd-app-green" ]; then
                NEW_APP="cicd-app-blue"
                OLD_APP="cicd-app-green"
            else
                NEW_APP="cicd-app-green"
                OLD_APP="cicd-app-blue"
            fi

            echo "✅ 현재 실행 중인 앱 컨테이너: \$CURRENT_APP"
            echo "✅ 새로운 애플리케이션 컨테이너 실행: \$NEW_APP"

            # ✅ 기존 컨테이너 정리
            if docker ps -q --filter "name=\$OLD_APP" | grep -q .; then
                echo "✅ 기존 컨테이너 \$OLD_APP 중지 및 삭제"
                docker stop \$OLD_APP
                docker rm \$OLD_APP
            else
                echo "⚠️ 기존 컨테이너 \$OLD_APP이 존재하지 않음. 삭제 스킵"
            fi

            # ✅ 새로운 컨테이너 실행 (공통 이미지 사용)
            docker pull $DOCKER_USERNAME/cicd-app:latest
            docker run -d --name \$NEW_APP --network app_network -p 8080:8080 $DOCKER_USERNAME/cicd-app:latest

            # ✅ Nginx 컨테이너가 없으면 실행
            docker ps -a | grep nginx-container || docker-compose up -d nginx

            # ✅ MySQL 컨테이너가 없으면 실행
            docker ps -a | grep mysql-container || docker-compose up -d mysql

            # ✅ Nginx 설정 변경 및 재시작
            sed -i "s/$OLD_APP/$NEW_APP/g" ~/cicd/nginx/default.conf || true
            docker restart nginx-container || docker-compose up -d nginx

            # ✅ 불필요한 Docker 이미지 정리
            echo "✅ 불필요한 Docker 이미지 삭제"
            docker image prune -a --filter "until=24h" -f
          EOF
